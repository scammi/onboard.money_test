{"version":3,"file":"sdk.esm.js","sources":["../src/application.ts","../src/constants.ts","../src/utils.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport type { TransactionReceipt } from '@ethersproject/providers';\nimport type { TxBatchDto } from './types/batch.interface'\n\nexport type { TransactionReceipt } from '@ethersproject/providers';\nexport type { TxBatchDto, TxRequestDto } from './types/batch.interface'\n\nexport class App {\n  private axiosInstance: AxiosInstance;\n\n  constructor(private apiKey: string, private baseURL: string) {\n    this.axiosInstance = axios.create({\n      baseURL: this.baseURL + '/application',\n      headers: {\n        apikey: this.apiKey,\n      },\n    });\n  }\n\n  balance = async (): Promise<{\n    balance: string;\n    relayAddress: string;\n  }> => {\n    const { balance, relayAddress } = (\n      await this.axiosInstance.get('/balance')\n    ).data;\n    return { balance, relayAddress };\n  };\n\n  deploy = async (): Promise<{ appAddress: string }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { appAddress } = (await this.axiosInstance.post('/deploy')).data;\n    // return app address\n    return { appAddress };\n  };\n\n  createUser = async (): Promise<{ userAddress: string }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { userAddress } = (\n      await this.axiosInstance.post('/users/create')\n    ).data;\n    // return user address\n    return { userAddress };\n  };\n\n  evaluateBatch = async (batch: TxBatchDto): Promise<{ success: boolean }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { success } = (\n      await this.axiosInstance.post('/transactions/evaluate', { batch })\n    ).data;\n    // return validity\n    return { success };\n  };\n\n  sendBatch = async (batch: TxBatchDto): Promise<TransactionReceipt> => {\n    // todo: check if sufficient balance\n    // call api\n    const txReceipt = (\n      await this.axiosInstance.post('/transactions/send', {\n        batch,\n      })\n    ).data;\n    // return validity\n    return txReceipt;\n  };\n\n  getPolicy = async (): Promise<{ policy: string }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { policy } = (await this.axiosInstance.get('/policy')).data;\n    // return validity\n    return { policy };\n  };\n\n  updatePolicy = async (\n    policy: string,\n    signerAddress?: string\n  ): Promise<void> => {\n    // todo: check if sufficient balance\n    // call api\n    await this.axiosInstance.post('/policy', {\n      body: { policy, signerAddress },\n    });\n  };\n}\n","export const Policies = {\n  Custodied: 'custodied',\n  Self: 'self',\n  Multisig: 'multisig',\n};\n","export const util = () => {};\n"],"names":["App","apiKey","baseURL","axiosInstance","get","data","balance","relayAddress","post","appAddress","userAddress","batch","success","txReceipt","policy","signerAddress","body","axios","create","headers","apikey","Policies","Custodied","Self","Multisig","util"],"mappings":";;IAOaA,GAAb,GAGE,aAAoBC,MAApB,EAA4CC,OAA5C;cAcU;eAQsB;eAStB;eAUA;eAUA;eAWkB;eAWpB;;AAzEY,aAAA,GAAAD,MAAA;AAAwB,cAAA,GAAAC,OAAA;;AAS5C,cAAA;AAAA;6BAKU,MAAKC,aAAL,CAAmBC,GAAnB,CAAuB,UAAvB;qCAD0B,sBAEhCC;YAFMC,iCAAAA;YAASC,sCAAAA;AAGjB,eAAO;AAAED,UAAAA,OAAO,EAAPA,OAAF;AAAWC,UAAAA,YAAY,EAAZA;AAAX,SAAP;;AACD,KARD;AAAA;AAAA;AAAA;;AAUA,aAAA;AAAA;AACE;AACA;6BAC8B,OAAKJ,aAAL,CAAmBK,IAAnB,CAAwB,SAAxB;YAAtBC,aAAe,sBAA2CJ,KAA1DI;AACR;AACA,eAAO;AAAEA,UAAAA,UAAU,EAAVA;AAAF,SAAP;;AACD,KAND;AAAA;AAAA;AAAA;;AAQA,iBAAA;AAAA;AACE;AACA;6BAEQ,OAAKN,aAAL,CAAmBK,IAAnB,CAAwB,eAAxB;YADAE,cAAgB,sBAEtBL,KAFMK;AAGR;AACA,eAAO;AAAEA,UAAAA,WAAW,EAAXA;AAAF,SAAP;;AACD,KARD;AAAA;AAAA;AAAA;;AAUA,oBAAA,aAAuBC,KAAvB;AAAA;AACE;AACA;6BAEQ,OAAKR,aAAL,CAAmBK,IAAnB,CAAwB,wBAAxB,EAAkD;AAAEG,QAAAA,KAAK,EAALA;AAAF,OAAlD;YADAC,UAAY,sBAElBP,KAFMO;AAGR;AACA,eAAO;AAAEA,UAAAA,OAAO,EAAPA;AAAF,SAAP;;AACD,KARD;AAAA;AAAA;AAAA;;AAUA,gBAAA,aAAmBD,KAAnB;AAAA;AACE;AACA;6BAEQ,OAAKR,aAAL,CAAmBK,IAAnB,CAAwB,oBAAxB,EAA8C;AAClDG,QAAAA,KAAK,EAALA;AADkD,OAA9C;AADR,YAAME,SAAS,GAAG,sBAIhBR,IAJF;AAKA;AACA,eAAOQ,SAAP;;AACD,KAVD;AAAA;AAAA;AAAA;;AAYA,gBAAA;AAAA;AACE;AACA;6BAC0B,OAAKV,aAAL,CAAmBC,GAAnB,CAAuB,SAAvB;YAAlBU,SAAW,sBAA0CT,KAArDS;AACR;AACA,eAAO;AAAEA,UAAAA,MAAM,EAANA;AAAF,SAAP;;AACD,KAND;AAAA;AAAA;AAAA;;AAQA,mBAAA,aACEA,MADF,EAEEC,aAFF;AAAA;AAIE;AACA;6BACM,OAAKZ,aAAL,CAAmBK,IAAnB,CAAwB,SAAxB,EAAmC;AACvCQ,QAAAA,IAAI,EAAE;AAAEF,UAAAA,MAAM,EAANA,MAAF;AAAUC,UAAAA,aAAa,EAAbA;AAAV;AADiC,OAAnC;AAGP,KATD;AAAA;AAAA;AAAA;;AAlEE,OAAKZ,aAAL,GAAqBc,KAAK,CAACC,MAAN,CAAa;AAChChB,IAAAA,OAAO,EAAE,KAAKA,OAAL,GAAe,cADQ;AAEhCiB,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,KAAKnB;AADN;AAFuB,GAAb,CAArB;AAMD;;ICjBUoB,QAAQ,GAAG;AACtBC,EAAAA,SAAS,EAAE,WADW;AAEtBC,EAAAA,IAAI,EAAE,MAFgB;AAGtBC,EAAAA,QAAQ,EAAE;AAHY,CAAjB;;ICAMC,IAAI,GAAG,SAAPA,IAAO,KAAb;;;;"}