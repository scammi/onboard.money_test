'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));

var App = function App(apiKey, baseURL) {
  var _this = this,
      _this2 = this,
      _this3 = this,
      _this4 = this,
      _this5 = this,
      _this6 = this,
      _this7 = this;

  this.apiKey = apiKey;
  this.baseURL = baseURL;

  this.balance = function () {
    try {
      return Promise.resolve(_this.axiosInstance.get('/balance')).then(function (_this$axiosInstance$g) {
        var _this$axiosInstance$g2 = _this$axiosInstance$g.data,
            balance = _this$axiosInstance$g2.balance,
            relayAddress = _this$axiosInstance$g2.relayAddress;
        return {
          balance: balance,
          relayAddress: relayAddress
        };
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.deploy = function () {
    try {
      // todo: check if sufficient balance
      // call api
      return Promise.resolve(_this2.axiosInstance.post('/deploy')).then(function (_this2$axiosInstance$) {
        var appAddress = _this2$axiosInstance$.data.appAddress;
        // return app address
        return {
          appAddress: appAddress
        };
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.createUser = function () {
    try {
      // todo: check if sufficient balance
      // call api
      return Promise.resolve(_this3.axiosInstance.post('/users/create')).then(function (_this3$axiosInstance$) {
        var userAddress = _this3$axiosInstance$.data.userAddress;
        // return user address
        return {
          userAddress: userAddress
        };
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.evaluateBatch = function (batch) {
    try {
      // todo: check if sufficient balance
      // call api
      return Promise.resolve(_this4.axiosInstance.post('/transactions/evaluate', {
        batch: batch
      })).then(function (_this4$axiosInstance$) {
        var success = _this4$axiosInstance$.data.success;
        // return validity
        return {
          success: success
        };
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.sendBatch = function (batch) {
    try {
      // todo: check if sufficient balance
      // call api
      return Promise.resolve(_this5.axiosInstance.post('/transactions/send', {
        batch: batch
      })).then(function (_this5$axiosInstance$) {
        var txReceipt = _this5$axiosInstance$.data;
        // return validity
        return txReceipt;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.getPolicy = function () {
    try {
      // todo: check if sufficient balance
      // call api
      return Promise.resolve(_this6.axiosInstance.get('/policy')).then(function (_this6$axiosInstance$) {
        var policy = _this6$axiosInstance$.data.policy;
        // return validity
        return {
          policy: policy
        };
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.updatePolicy = function (policy, signerAddress) {
    try {
      // todo: check if sufficient balance
      // call api
      return Promise.resolve(_this7.axiosInstance.post('/policy', {
        body: {
          policy: policy,
          signerAddress: signerAddress
        }
      })).then(function () {});
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.axiosInstance = axios.create({
    baseURL: this.baseURL + '/application',
    headers: {
      apikey: this.apiKey
    }
  });
};

var Policies = {
  Custodied: 'custodied',
  Self: 'self',
  Multisig: 'multisig'
};

var util = function util() {};

exports.App = App;
exports.Policies = Policies;
exports.util = util;
//# sourceMappingURL=sdk.cjs.development.js.map
