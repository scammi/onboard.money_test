{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/application.ts","../src/constants.ts","../src/utils.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport type { TransactionReceipt } from '@ethersproject/providers';\nimport type { TxBatchDto } from './types/batch.interface'\n\nexport type { TransactionReceipt } from '@ethersproject/providers';\nexport type { TxBatchDto, TxRequestDto } from './types/batch.interface'\n\nexport class App {\n  private axiosInstance: AxiosInstance;\n\n  constructor(private apiKey: string, private baseURL: string) {\n    this.axiosInstance = axios.create({\n      baseURL: this.baseURL + '/application',\n      headers: {\n        apikey: this.apiKey,\n      },\n    });\n  }\n\n  balance = async (): Promise<{\n    balance: string;\n    relayAddress: string;\n  }> => {\n    const { balance, relayAddress } = (\n      await this.axiosInstance.get('/balance')\n    ).data;\n    return { balance, relayAddress };\n  };\n\n  deploy = async (): Promise<{ appAddress: string }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { appAddress } = (await this.axiosInstance.post('/deploy')).data;\n    // return app address\n    return { appAddress };\n  };\n\n  createUser = async (): Promise<{ userAddress: string }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { userAddress } = (\n      await this.axiosInstance.post('/users/create')\n    ).data;\n    // return user address\n    return { userAddress };\n  };\n\n  evaluateBatch = async (batch: TxBatchDto): Promise<{ success: boolean }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { success } = (\n      await this.axiosInstance.post('/transactions/evaluate', { batch })\n    ).data;\n    // return validity\n    return { success };\n  };\n\n  sendBatch = async (batch: TxBatchDto): Promise<TransactionReceipt> => {\n    // todo: check if sufficient balance\n    // call api\n    const txReceipt = (\n      await this.axiosInstance.post('/transactions/send', {\n        batch,\n      })\n    ).data;\n    // return validity\n    return txReceipt;\n  };\n\n  getPolicy = async (): Promise<{ policy: string }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { policy } = (await this.axiosInstance.get('/policy')).data;\n    // return validity\n    return { policy };\n  };\n\n  updatePolicy = async (\n    policy: string,\n    signerAddress?: string\n  ): Promise<void> => {\n    // todo: check if sufficient balance\n    // call api\n    await this.axiosInstance.post('/policy', {\n      body: { policy, signerAddress },\n    });\n  };\n}\n","export const Policies = {\n  Custodied: 'custodied',\n  Self: 'self',\n  Multisig: 'multisig',\n};\n","export const util = () => {};\n"],"names":["apiKey","baseURL","this","_this","axiosInstance","get","_this$axiosInstance$g","data","balance","relayAddress","_this2","post","appAddress","_this2$axiosInstance$","_this3","userAddress","_this3$axiosInstance$","batch","_this4","success","_this4$axiosInstance$","_this5","_this5$axiosInstance$","_this6","policy","_this6$axiosInstance$","signerAddress","_this7","body","axios","create","headers","apikey","Custodied","Self","Multisig"],"mappings":"4JAUE,SAAoBA,EAAwBC,SAclCC,OAQsBA,OAStBA,OAUAA,OAUAA,OAWkBA,OAWpBA,iBAzEYF,eAAwBC,qDAclCE,EAAKC,cAAcC,IAAI,qCADGC,EAEhCC,WACK,CAAEC,UAHDA,QAGUC,eAHDA,uGASaC,EAAKN,cAAcO,KAAK,oCAE/C,CAAEC,WAFcC,EAA2CN,KAA1DK,yGASAE,EAAKV,cAAcO,KAAK,0CAGzB,CAAEI,YAJeC,EAEtBT,KAFMQ,gFAOaE,8BAIbC,EAAKd,cAAcO,KAAK,yBAA0B,CAAEM,MAAAA,6BAGrD,CAAEE,QAJWC,EAElBb,KAFMY,wEAOSF,8BAITI,EAAKjB,cAAcO,KAAK,qBAAsB,CAClDM,MAAAA,8BAFcK,EAIhBf,iGAQwBgB,EAAKnB,cAAcC,IAAI,oCAE1C,CAAEmB,OAFUC,EAA0ClB,KAArDiB,0EAMRA,EACAE,8BAIMC,EAAKvB,cAAcO,KAAK,UAAW,CACvCiB,KAAM,CAAEJ,OAAAA,EAAQE,cAAAA,oEAzEbtB,cAAgByB,EAAMC,OAAO,CAChC7B,QAASC,KAAKD,QAAU,eACxB8B,QAAS,CACPC,OAAQ9B,KAAKF,4BCdG,CACtBiC,UAAW,YACXC,KAAM,OACNC,SAAU,yBCHQ"}