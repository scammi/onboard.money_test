import axios, { AxiosInstance } from 'axios';
import type { TransactionReceipt } from '@ethersproject/providers';
import type { TxBatchDto } from './types/batch.interface'

export type { TransactionReceipt } from '@ethersproject/providers';
export type { TxBatchDto, TxRequestDto } from './types/batch.interface'

export class App {
  private axiosInstance: AxiosInstance;

  constructor(private apiKey: string, private baseURL: string) {
    this.axiosInstance = axios.create({
      baseURL: this.baseURL + '/application',
      headers: {
        apikey: this.apiKey,
      },
    });
  }

  balance = async (): Promise<{
    balance: string;
    relayAddress: string;
  }> => {
    const { balance, relayAddress } = (
      await this.axiosInstance.get('/balance')
    ).data;
    return { balance, relayAddress };
  };

  deploy = async (): Promise<{ appAddress: string }> => {
    // todo: check if sufficient balance
    // call api
    const { appAddress } = (await this.axiosInstance.post('/deploy')).data;
    // return app address
    return { appAddress };
  };

  createUser = async (): Promise<{ userAddress: string }> => {
    // todo: check if sufficient balance
    // call api
    const { userAddress } = (
      await this.axiosInstance.post('/users/create')
    ).data;
    // return user address
    return { userAddress };
  };

  evaluateBatch = async (batch: TxBatchDto): Promise<{ success: boolean }> => {
    // todo: check if sufficient balance
    // call api
    const { success } = (
      await this.axiosInstance.post('/transactions/evaluate', { batch })
    ).data;
    // return validity
    return { success };
  };

  sendBatch = async (batch: TxBatchDto): Promise<TransactionReceipt> => {
    // todo: check if sufficient balance
    // call api
    const txReceipt = (
      await this.axiosInstance.post('/transactions/send', {
        batch,
      })
    ).data;
    // return validity
    return txReceipt;
  };

  getPolicy = async (): Promise<{ policy: string }> => {
    // todo: check if sufficient balance
    // call api
    const { policy } = (await this.axiosInstance.get('/policy')).data;
    // return validity
    return { policy };
  };

  updatePolicy = async (
    policy: string,
    signerAddress?: string
  ): Promise<void> => {
    // todo: check if sufficient balance
    // call api
    await this.axiosInstance.post('/policy', {
      body: { policy, signerAddress },
    });
  };
}
