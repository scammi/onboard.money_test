"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_ux_1 = require("cli-ux");
const inquirer = require("inquirer");
const axios_1 = require("axios");
const sdk_1 = require("@onboardmoney/sdk");
class Signup extends command_1.Command {
    async run() {
        var _a;
        // parse args
        const { args, flags } = this.parse(Signup);
        // pull network from arg or cache
        const network = (_a = args.network) !== null && _a !== void 0 ? _a : '';
        // validate network
        const networks = ['mainnet', 'ropsten', 'kovan', 'rinkeby', 'goerli'];
        if (!networks.includes(network)) {
            this.error(`invalid network: ${network}`);
        }
        // init client
        const axiosInstance = axios_1.default.create({
            baseURL: `https://${network}.onboard.money`,
        });
        // prompt for username and password
        const appname = await cli_ux_1.default.prompt('Select app name');
        const policy = (await inquirer.prompt([
            {
                name: 'policy',
                message: 'Select custody policy',
                type: 'list',
                choices: [
                    { name: sdk_1.Policies.Custodied },
                    { name: sdk_1.Policies.Self },
                    { name: sdk_1.Policies.Multisig },
                ],
            },
        ])).policy;
        const username = await cli_ux_1.default.prompt('Select username');
        const password = await cli_ux_1.default.prompt('Select password', {
            type: 'hide',
        });
        const passwordCheck = await cli_ux_1.default.prompt('Confirm password', {
            type: 'hide',
        });
        if (password !== passwordCheck) {
            this.error("passwords don't match!");
        }
        // signup
        cli_ux_1.default.action.start(`Creating app '${appname}' for developer account '${username}'`);
        await axiosInstance.post('/dashboard/auth/signup', {
            username,
            password,
        });
        // login
        const { accessToken } = (await axiosInstance.post('/dashboard/auth/login', {}, {
            auth: {
                username,
                password,
            },
        })).data;
        // get api key
        const { apiKey, relayAddress } = (await axiosInstance.post('/dashboard/apps/create', { name: appname, policy }, { headers: { Authorization: `Bearer ${accessToken}` } })).data;
        // @thegostep todo: #258 fund from faucet if possible
        // cache api key
        // log api key
        cli_ux_1.default.action.stop(`Success!`);
        this.log(`'${appname}' created on ${network} with relay address ${relayAddress} and apikey ${apiKey}`);
        cli_ux_1.default.url(relayAddress, network === 'mainnet'
            ? `https://etherscan.io/address/${relayAddress}`
            : `https://${network}.etherscan.io/address/${relayAddress}`);
    }
}
exports.default = Signup;
Signup.description = 'Signup for onboard.money as a developer';
Signup.examples = [
    `$ onboardmoney signup --network=mainnet
Select app name
Select custody policy
Select username
Select password
Confirm password
Creating app 'APP_NAME' for developer account 'USERNAME'
Success!
'APP_NAME' created with relay address 0x1234 and apikey ABCXYZ
https://etherscan.io/address/0x1234
`,
];
Signup.flags = {
    help: command_1.flags.help({ char: 'h' }),
    network: command_1.flags.string({
        char: 'n',
        description: 'network to target',
    }),
};
Signup.args = [{ name: 'network' }];
