{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/app/types/app.interface.ts","../src/app/app.ts"],"sourcesContent":["import { BigNumberish, PopulatedTransaction } from 'ethers'\n\nexport interface TxBatchInterface {\n  txs: PopulatedTransaction[]\n  gasPrice?: BigNumberish\n  signatures?: string[]\n}\nexport enum Policies {\n  Custodied = 'custodied',\n  Self = 'self',\n  Multisig = 'multisig',\n}\n","import axios, { AxiosInstance } from 'axios'\nimport { TransactionReceipt } from '@ethersproject/providers'\nimport { Policies, TxBatchInterface } from './types/app.interface'\n\nexport * from './types/app.interface'\n\nexport class App {\n  private axiosInstance: AxiosInstance\n\n  constructor(private apiKey: string, private baseURL: string) {\n    this.axiosInstance = axios.create({\n      baseURL: this.baseURL + '/application',\n      headers: {\n        apikey: this.apiKey,\n      },\n    })\n  }\n\n  balance = async (): Promise<{\n    balance: string\n    relayAddress: string\n  }> => {\n    const { balance, relayAddress } = (\n      await this.axiosInstance.get('/balance')\n    ).data\n    return { balance, relayAddress }\n  }\n\n  createUser = async (): Promise<{ userAddress: string }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { userAddress } = (\n      await this.axiosInstance.post('/users/create')\n    ).data\n    // return user address\n    return { userAddress }\n  }\n\n  evaluateBatch = async (\n    batch: TxBatchInterface,\n  ): Promise<{ success: boolean }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { success } = (\n      await this.axiosInstance.post('/transactions/evaluate', batch)\n    ).data\n    // return validity\n    return { success }\n  }\n\n  sendBatch = async (batch: TxBatchInterface): Promise<TransactionReceipt> => {\n    // todo: check if sufficient balance\n    // call api\n    const txReceipt = (\n      await this.axiosInstance.post('/transactions/send', batch)\n    ).data as TransactionReceipt\n    // return validity\n    return txReceipt\n  }\n\n  getPolicy = async (): Promise<{ policy: Policies }> => {\n    // call api\n    const { policy } = (await this.axiosInstance.get('/policy')).data\n    // return validity\n    return { policy }\n  }\n\n  updatePolicy = async (\n    policy: Policies,\n    signerAddress?: string,\n  ): Promise<void> => {\n    // call api\n    await this.axiosInstance.post('/policy', {\n      body: { policy, signerAddress },\n    })\n  }\n}\n"],"names":["Policies","apiKey","baseURL","this","_this","axiosInstance","get","_this$axiosInstance$g","data","balance","relayAddress","_this2","post","userAddress","_this2$axiosInstance$","batch","_this3","success","_this3$axiosInstance$","_this4","_this4$axiosInstance$","_this5","policy","_this5$axiosInstance$","signerAddress","_this6","body","axios","create","headers","apikey"],"mappings":"0EAOYA,yEAAAA,EAAAA,mBAAAA,4CAEVA,cACAA,kCCDA,SAAoBC,EAAwBC,SAclCC,OASAA,OAYAA,OAUAA,OAQkBA,OAUpBA,iBA/DYF,eAAwBC,qDAclCE,EAAKC,cAAcC,IAAI,qCADGC,EAEhCC,WACK,CAAEC,UAHDA,QAGUC,eAHDA,2GAUTC,EAAKN,cAAcO,KAAK,0CAGzB,CAAEC,YAJeC,EAEtBN,KAFMK,gFAQRE,8BAKQC,EAAKX,cAAcO,KAAK,yBAA0BG,4BAGnD,CAAEE,QAJWC,EAElBV,KAFMS,wEAOSF,8BAITI,EAAKd,cAAcO,KAAK,qBAAsBG,6BADpCK,EAEhBZ,iGAOwBa,EAAKhB,cAAcC,IAAI,oCAE1C,CAAEgB,OAFUC,EAA0Cf,KAArDc,0EAMRA,EACAE,8BAGMC,EAAKpB,cAAcO,KAAK,UAAW,CACvCc,KAAM,CAAEJ,OAAAA,EAAQE,cAAAA,oEA/DbnB,cAAgBsB,EAAMC,OAAO,CAChC1B,QAASC,KAAKD,QAAU,eACxB2B,QAAS,CACPC,OAAQ3B,KAAKF"}