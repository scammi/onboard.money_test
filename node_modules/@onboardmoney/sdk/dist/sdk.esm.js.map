{"version":3,"file":"sdk.esm.js","sources":["../src/app/types/app.interface.ts","../src/app/app.ts"],"sourcesContent":["import { BigNumberish, PopulatedTransaction } from 'ethers'\n\nexport interface TxBatchInterface {\n  txs: PopulatedTransaction[]\n  gasPrice?: BigNumberish\n  signatures?: string[]\n}\nexport enum Policies {\n  Custodied = 'custodied',\n  Self = 'self',\n  Multisig = 'multisig',\n}\n","import axios, { AxiosInstance } from 'axios'\nimport { TransactionReceipt } from '@ethersproject/providers'\nimport { Policies, TxBatchInterface } from './types/app.interface'\n\nexport * from './types/app.interface'\n\nexport class App {\n  private axiosInstance: AxiosInstance\n\n  constructor(private apiKey: string, private baseURL: string) {\n    this.axiosInstance = axios.create({\n      baseURL: this.baseURL + '/application',\n      headers: {\n        apikey: this.apiKey,\n      },\n    })\n  }\n\n  balance = async (): Promise<{\n    balance: string\n    relayAddress: string\n  }> => {\n    const { balance, relayAddress } = (\n      await this.axiosInstance.get('/balance')\n    ).data\n    return { balance, relayAddress }\n  }\n\n  createUser = async (): Promise<{ userAddress: string }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { userAddress } = (\n      await this.axiosInstance.post('/users/create')\n    ).data\n    // return user address\n    return { userAddress }\n  }\n\n  evaluateBatch = async (\n    batch: TxBatchInterface,\n  ): Promise<{ success: boolean }> => {\n    // todo: check if sufficient balance\n    // call api\n    const { success } = (\n      await this.axiosInstance.post('/transactions/evaluate', batch)\n    ).data\n    // return validity\n    return { success }\n  }\n\n  sendBatch = async (batch: TxBatchInterface): Promise<TransactionReceipt> => {\n    // todo: check if sufficient balance\n    // call api\n    const txReceipt = (\n      await this.axiosInstance.post('/transactions/send', batch)\n    ).data as TransactionReceipt\n    // return validity\n    return txReceipt\n  }\n\n  getPolicy = async (): Promise<{ policy: Policies }> => {\n    // call api\n    const { policy } = (await this.axiosInstance.get('/policy')).data\n    // return validity\n    return { policy }\n  }\n\n  updatePolicy = async (\n    policy: Policies,\n    signerAddress?: string,\n  ): Promise<void> => {\n    // call api\n    await this.axiosInstance.post('/policy', {\n      body: { policy, signerAddress },\n    })\n  }\n}\n"],"names":["Policies","App","apiKey","baseURL","axiosInstance","get","data","balance","relayAddress","post","userAddress","batch","success","txReceipt","policy","signerAddress","body","axios","create","headers","apikey"],"mappings":";;IAOYA;;AAAZ,WAAYA;AACVA,EAAAA,qBAAA,cAAA;AACAA,EAAAA,gBAAA,SAAA;AACAA,EAAAA,oBAAA,aAAA;AACD,CAJD,EAAYA,QAAQ,KAARA,QAAQ,KAAA,CAApB;;ICDaC,GAAb,GAGE,aAAoBC,MAApB,EAA4CC,OAA5C;cAcU;eASA;eAYA;eAUA;eAQkB;eAUpB;;AA/DY,aAAA,GAAAD,MAAA;AAAwB,cAAA,GAAAC,OAAA;;AAS5C,cAAA;AAAA;6BAKU,MAAKC,aAAL,CAAmBC,GAAnB,CAAuB,UAAvB;qCAD0B,sBAEhCC;YAFMC,iCAAAA;YAASC,sCAAAA;AAGjB,eAAO;AAAED,UAAAA,OAAO,EAAPA,OAAF;AAAWC,UAAAA,YAAY,EAAZA;AAAX,SAAP;;AACD,KARD;AAAA;AAAA;AAAA;;AAUA,iBAAA;AAAA;AACE;AACA;6BAEQ,OAAKJ,aAAL,CAAmBK,IAAnB,CAAwB,eAAxB;YADAC,cAAgB,sBAEtBJ,KAFMI;AAGR;AACA,eAAO;AAAEA,UAAAA,WAAW,EAAXA;AAAF,SAAP;;AACD,KARD;AAAA;AAAA;AAAA;;AAUA,oBAAA,aACEC,KADF;AAAA;AAGE;AACA;6BAEQ,OAAKP,aAAL,CAAmBK,IAAnB,CAAwB,wBAAxB,EAAkDE,KAAlD;YADAC,UAAY,sBAElBN,KAFMM;AAGR;AACA,eAAO;AAAEA,UAAAA,OAAO,EAAPA;AAAF,SAAP;;AACD,KAVD;AAAA;AAAA;AAAA;;AAYA,gBAAA,aAAmBD,KAAnB;AAAA;AACE;AACA;6BAEQ,OAAKP,aAAL,CAAmBK,IAAnB,CAAwB,oBAAxB,EAA8CE,KAA9C;AADR,YAAME,SAAS,GAAG,sBAEhBP,IAFF;AAGA;AACA,eAAOO,SAAP;;AACD,KARD;AAAA;AAAA;AAAA;;AAUA,gBAAA;AAAA;AACE;6BAC0B,OAAKT,aAAL,CAAmBC,GAAnB,CAAuB,SAAvB;YAAlBS,SAAW,sBAA0CR,KAArDQ;AACR;AACA,eAAO;AAAEA,UAAAA,MAAM,EAANA;AAAF,SAAP;;AACD,KALD;AAAA;AAAA;AAAA;;AAOA,mBAAA,aACEA,MADF,EAEEC,aAFF;AAAA;AAIE;6BACM,OAAKX,aAAL,CAAmBK,IAAnB,CAAwB,SAAxB,EAAmC;AACvCO,QAAAA,IAAI,EAAE;AAAEF,UAAAA,MAAM,EAANA,MAAF;AAAUC,UAAAA,aAAa,EAAbA;AAAV;AADiC,OAAnC;AAGP,KARD;AAAA;AAAA;AAAA;;AAzDE,OAAKX,aAAL,GAAqBa,KAAK,CAACC,MAAN,CAAa;AAChCf,IAAAA,OAAO,EAAE,KAAKA,OAAL,GAAe,cADQ;AAEhCgB,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,KAAKlB;AADN;AAFuB,GAAb,CAArB;AAMD,CAVH;;;;"}